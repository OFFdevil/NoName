# Язык NoName - Описание языка
## Структура программы
0. Пробелы значимы и определяют зону видимости переменных.
1. Сначала идёт определение всех функций, которые могут быть использованы в программе.
2. После объявления всех функций должна быть в начале строки `main`, что указывает на начало программы.
3. После `main` разрешено:
    0. Перед вызовом следующих конструкций должен стоять хотя бы один пробел!
    1. Объявлять переменные
    2. Изменять значение переменной
    3. Вызывать функции
    4. Сравнивать переменные
    5. Использовать or -> для этого нужно в одной строке вызвать две функции и поставить между ними ",":
    ```
      FUNChel( A),FUNChee( A B C);
    ```

## Ключевые слова:
```
def; int; string; main; struct
```

## Переменные 
1. Есть следующие типы переменных:
```
int
string
```
2. Название переменных: начинается с латинской буквы в верхнем регистре, затем может быть любое количество(пустое тоже) латинский букв в нижнем регистре
```
int    Qoooo;
int    Ihello;
string Hello;
```
3. Объявление новой переменной: нужно указать сначала тип затем один пробел, затем имя, потом ":=", затем значение, в конце ставится знак ";". Общее объявление переменной: `<type> <name>:=<value>;`. Обязательно нужно объявить значение, иначе UB.
```cpp
int Qq:=123;
int Qqq:=12;
string Qing:="string";
string Qii5:="123"; // error = цифра в имени
```
4. Изменение уже существующей переменной: `$<имя_существующей переменной>=<имя_существующей переменной>;`
```cpp
int Qq:=123;
// тут Qq = 123
$Qq=12;
// тут Qq = 12
``` 

## Конструкторы переменных
Объявляется при помощи круглых скобок, внутри которых находятся возможно пустое множество из переменных и конструкторов. Между переменными должен быть хотя бы один пробел. Объявление:
```cpp
(struct a (struct a b)) // конструктор от переменной и другого конструктора
```


## Функции
1. Объявление функции. В начале строки должно стоять func, затем следует название функции, которое начинает с `FUNC`, после которого могут быть только латинские буквы в нижнем регистре. Потом следует аргументы функции через пробел. После аргументов не должно быть пробелов!!! Потом должно стоять "\n" и "{", после которого идёт тело. Каждая строчка должна начинаться с двух пробелов или больше. На последней строке после тела функции должно стоять "}".
```
def FUNCwtf A B
{
  $A=B;
  $=A;
}

def FUNCaaa A B (struct C D)
{
  FUNCababb(A B);
}
```
2. В функции можно вызывать другие функции
3. Вызов функции, аргументы должны быть через пробел ими могут быть только конструкторы и переменные: `<name>(<parametrs>);`
```
  FUNCname( A B C);
  FUNCani();
```

## Комментарии
Есть два типа комментариев:
1. Однострочные: `<something>// <comment>`
    1. Комментарии можно писать между объявлением функция, после определения параметров функции, в main, после ";" в main
    2. Нельзя использовать пробелы перед комментариями!!!
   ```
    // можно

    def FUNCk A// можно
    { 
    aaaaaaaaaaaaaaaaaaaaaa
    }// можно

    // можно
    main//можно
      int A:=123;//можно
      int B:=123; // нельзя
    // можно
     // нельзя
   ```
2. Многострочные(многострочные комментарии могут быть в многострочных комментариях): `/*<something>*/`

## Унификация
Унифицировать можно только переменные. Синтаксис: `(<name1>)...(<name2>);`, вместо `...` можно поставить любой логический оператор из списка: `&& == || ^`
```
 (aba)==(aba);
```

## Примеры программ на языке:
1. 
```
main
  int A:=123;
   int B:=123;
 string B:="hello";
// comment
  (A)==(B);
```
2. 
```
def FUNCb A
{
 // body
}

def FUNCc (struct A)
{
 // body
}

main
  int A:=123;// create variable
  int C:=123;
  FUNCb( A),FUNCb( (struct A));
  FUNCb( (struct C));//call function
```
3. 
```
def FUNCb
{
 // body
}

main
  int A:=123;
  int C:=123;
  FUNCb();
```
